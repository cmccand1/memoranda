plugins {
    id 'java'
    id 'application'
    id "com.github.spotbugs" version "6.0.26"
}

application {
    mainClassName = 'memoranda.Start'
    compileJava.options.encoding = 'UTF-8'
}


spotbugs {
    toolVersion = "4.8.6"
    reportsDir = file("$buildDir/reports/spotbugs")
    ignoreFailures = true // Can be overridden later
}

spotbugsMain {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// Repositories and dependencies for code go here
repositories {
    mavenCentral()
}

dependencies {
    // Legacy dependencies for XML/HTML utilities
    implementation 'com.io7m.xom:xom:1.2.+'
    implementation 'net.sourceforge.nekohtml:nekohtml:1.9.+'
    // Logging dependencies
    implementation 'org.slf4j:slf4j-api:1.7.36' // Logging interface
    implementation 'ch.qos.logback:logback-classic:1.4.14' // Logging implementation
    // JUnit 5 dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.2'
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.7.0')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.7.0') // Engine to run tests
    // Mockito dependencies
    testImplementation 'org.mockito:mockito-junit-jupiter:5.14.2'
}

test {
    useJUnitPlatform() // Use JUnit 5
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Custom task to fail build on high-severity issues
tasks.register("failOnHighSeverityIssues") {
    group = "verification"
    description = "Fails the build if SpotBugs finds high-severity issues."
    dependsOn tasks.spotbugsMain // Ensure SpotBugs runs first
    doLast {
        def reportFile = file("$buildDir/reports/spotbugs/main.xml")
        if (!reportFile.exists()) {
            println "SpotBugs report not found, skipping severity check."
            return
        }

        // Parse the SpotBugs XML report
        def parser = new XmlSlurper().parse(reportFile)
        def highSeverityCount = parser.'**'.findAll { node ->
            node.name() == 'BugInstance' && node.@priority.toInteger() == 1
        }.size()

        if (highSeverityCount > 0) {
            throw new GradleException("SpotBugs found $highSeverityCount high-severity issues.")
        } else {
            println "No high-severity SpotBugs issues found."
        }
    }
}

// Ensure the custom task runs after SpotBugs
tasks.check.dependsOn "failOnHighSeverityIssues"
